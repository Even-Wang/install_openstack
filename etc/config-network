#!/bin/bash
#vlan config

if [  -e ${TOPDIR}/lib/ocata-log.sh ]
then	
	source ${TOPDIR}/lib/ocata-log.sh
else
	echo -e "\033[41;37m ${TOPDIR}/ocata-log.sh is not exist. \033[0m"
	exit 1
fi
#input variable
if [  -e ${TOPDIR}/lib/installrc ]
then	
	source ${TOPDIR}/lib/installrc 
else
	echo -e "\033[41;37m ${TOPDIR}/lib/installr is not exist. \033[0m"
	exit 1
fi

#get config function 
if [  -e ${TOPDIR}/lib/source-function ]
then	
	source ${TOPDIR}/lib/source-function
else
	echo -e "\033[41;37m ${TOPDIR}/source-function is not exist. \033[0m"
	exit 1
fi

#controller node
function fn_config_controller () {
yum  install -y openvswitch 
fn_log "yum  install -y openvswitch "
cat <<END >/tmp/tmp
ml2 type_drivers  flat,vlan,gre,vxlan
ml2 tenant_network_types  vlan
ml2_type_vlan network_vlan_ranges  physnet1:1000:2999
END
fn_log "create /tmp/tmp "


fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini"

systemctl restart neutron-server 
fn_log "systemctl restart neutron-server"

}

#netwok and computer node 
function fn_config_computer_network () {
NET_INT=`ip add | grep br-vlan `
if [ $? -ne 0  ] 
then
	ovs-vsctl add-br br-vlan 
	fn_log "ovs-vsctl add-br br-int"
fi


ovs-vsctl  show | grep Interface | grep $1
if [ $? -eq 0   ]
then	
	log_info " ${NET_DEVICE_NAME} have been added."
else
	ovs-vsctl add-port br-vlan $1 
	fn_log "ovs-vsctl add-port br-vlan $1 "
fi




cat <<END >/tmp/tmp
ml2 type_drivers  flat,vlan,gre,vxlan
ml2 tenant_network_types  vlan
ml2_type_vlan network_vlan_ranges  physnet1:1000:2999
END
fn_log "create /tmp/tmp "


fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini"

cat <<END >/tmp/tmp
ml2 type_drivers  flat,vlan,gre,vxlan
ml2 tenant_network_types  vlan
ml2_type_vlan network_vlan_ranges  physnet1:1000:2999
END
fn_log "create /tmp/tmp "


fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini"



cat <<END >/tmp/tmp
ovs bridge_mappings  physnet1:br-vlan
END
fn_log "create /tmp/tmp "
fn_set_conf /etc/neutron/plugins/ml2/openvswitch_agent.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/openvswitch_agent.ini"

systemctl restart neutron-openvswitch-agent 
fn_log "systemctl restart neutron-openvswitch-agent "

}

#network node
function fn_config_network () {
NET_INT=`ip add | grep br-ext  `
if [ $? -ne 0  ] 
then
	ovs-vsctl add-br br-ext 
	fn_log "ovs-vsctl add-br br-int"

fi

ovs-vsctl  show | grep Interface | grep $1
if [ $? -eq 0   ]
then	
	log_info " ${NET_DEVICE_NAME} have been added."
else
	ovs-vsctl add-port br-ext $1
	fn_log "ovs-vsctl add-port br-ext $1 "
fi
cat <<END >/tmp/tmp
DEFAULT  external_network_bridge  br-ext
END
fn_log "create /tmp/tmp "
fn_set_conf /etc/neutron/l3_agent.ini
fn_log "fn_set_conf /etc/neutron/l3_agent.ini"
systemctl restart neutron-l3-agent 
fn_log "systemctl restart neutron-l3-agent "

}



function fn_create_net () {

yum install -y python-openstackclient 
source /root/demo-openrc.sh

if [ -e /root/.ssh ]
then
    rm -rf  /root/.ssh
    fn_log "rm -rf  /root/.ssh"
fi

KEYPAIR=`nova keypair-list | grep  mykey | awk -F " " '{print$2}'`
if [  ${KEYPAIR}x = mykeyx ]
then
	log_info "keypair had added."
else
	ssh-keygen -t dsa -f ~/.ssh/id_dsa -N ""
	fn_log "ssh-keygen -t dsa -f ~/.ssh/id_dsa -N """
	openstack keypair create --public-key ~/.ssh/id_dsa.pub mykey
	fn_log "openstack keypair create --public-key ~/.ssh/id_dsa.pub mykey"
fi

SECRULE=`nova secgroup-list-rules  default | grep 22 | awk -F " " '{print$4}'`
if [ x${SECRULE} = x22 ]
then 
	log_info "port 22 and icmp had add to secgroup."
else
	openstack security group rule create --proto icmp default
	fn_log "openstack security group rule create --proto icmp default "
	openstack security group rule create --proto tcp --dst-port 22 default
	fn_log "openstack security group rule create --proto tcp --dst-port 22 default"
fi
source /root/admin-openrc.sh

openstack router show router01 >/dev/null
if [ $? -ne  0 ]
then
	openstack router create router01
	fn_log "openstack router create router01"
fi

openstack network show int_net >/dev/null
if [ $? -ne  0 ]
then
	 openstack network create int_net
	fn_log " openstack network create int_net"
fi

openstack subnet  list | grep subnet1 >/dev/null
if [ $? -ne  0 ]
then
	openstack subnet create subnet1 --network int_net --subnet-range ${NEUTRON_PRIVATE_NET} --gateway ${PRIVATE_NET_GW}  --dns-nameserver ${PRIVATE_NET_DNS} 
	fn_log "openstack subnet create subnet1 --network int_net --subnet-range ${NEUTRON_PRIVATE_NET} --gateway ${PRIVATE_NET_GW}  --dns-nameserver ${PRIVATE_NET_DNS}"
fi


openstack port list | grep `openstack subnet list |grep subnet1 | awk -F " " '{print$2}'`
if [ $? -ne  0 ]
then
	openstack router add subnet router01 subnet1 >/dev/null
	fn_log "openstack router add subnet router01 subnet1"
fi


openstack network show ext_net >/dev/null
if [ $? -ne  0  ]
then
	openstack network create --external ext_net
	fn_log "openstack network create --external ext_net"
fi



openstack subnet  list | grep subnet2 >/dev/null
if [ $? -ne  0 ]
then
	openstack subnet create subnet2 --network ext_net --subnet-range ${NEUTRON_PUBLIC_NET} --allocation-pool start=${PUBLIC_NET_START},end=${PUBLIC_NET_END} --gateway ${PUBLIC_NET_GW}   --dns-nameserver ${NEUTRON_DNS}   
	fn_log "openstack subnet create subnet2 --network ext_net --subnet-range ${NEUTRON_PUBLIC_NET} --allocation-pool start=${PUBLIC_NET_START},end=${PUBLIC_NET_END} --gateway ${PUBLIC_NET_GW}   --dns-nameserver ${NEUTRON_DNS}  "
fi


source /root/admin-openrc.sh
ip netns
fn_log "ip netns"
FLAVOR_NANO=`openstack flavor list | grep m1.nano | awk -F "|" '{print$3}' | awk -F " " '{print$1}'`
if [ ${FLAVOR_NANO}x = m1.nanox ]
then
    log_info  "m1.nanox had created."
else
     openstack flavor create --id 0 --vcpus 1 --ram 512 --disk 1 m1.nano
     fn_log "openstack flavor create --id 0 --vcpus 1 --ram 512 --disk 1 m1.nano"
fi
}




function fn_config_vlan_main () {
if [ -e /etc/openstack-ocata_tag/controller_neutron.tag ]
then
	fn_config_controller
fi

if  [ -e /etc/openstack-ocata_tag/network_neutron.tag ] 
then 
	fn_config_computer_network ${IN_DEVICE_NAME}
	fn_log "fn_config_computer_network ${IN_DEVICE_NAME}"
	fn_config_network ${EXT_NET_DEVICE}
	fn_log "fn_config_network ${EXT_NET_DEVICE} "
	fn_create_net
	fn_log "fn_create_net"
fi 

if  [ -e /etc/openstack-ocata_tag/computer_neutron.tag ] 
then 
	read -p "please input the local host network interface name [eg:eth2]:" DEV_NETWORK
	if [ -z  ${DEV_NETWORK}   ]
	then
		echo -e "\033[41;37m please input the local host network interface name [eg:eth2]. \033[0m"
		exit 1
	fi
	fn_config_computer_network ${DEV_NETWORK}
	fn_log "fn_config_computer_network ${DEV_NETWORK} "
fi 
}

#config vxlan
#----------------------------------------------------
function fn_config_controller_vxlan () {
yum  install -y openvswitch 
fn_log "yum  install -y openvswitch "
cat <<END >/tmp/tmp
ml2 type_drivers   flat,vlan,gre,vxlan
ml2 tenant_network_types   vxlan
ml2_type_flat flat_networks   physnet1
ml2_type_vxlan vni_ranges   1:1000
END
fn_log "create /tmp/tmp "


fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini"

systemctl restart neutron-server 
fn_log "systemctl restart neutron-server"

}

#netwok and computer node 
function fn_config_computer_network_vxlan () {
cat <<END >/tmp/tmp
ml2 type_drivers   flat,vlan,gre,vxlan
ml2 tenant_network_types   vxlan
ml2_type_flat flat_networks   physnet1
ml2_type_vxlan vni_ranges   1:1000
securitygroup firewall_driver   iptables_hybrid
END
fn_log "create /tmp/tmp "


fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini"


LOCAL_IP=`grep $HOSTNAME /etc/hosts | awk -F " " '{print$1}'`
cat <<END >/tmp/tmp
oagent tunnel_types   vxlan
agent l2_population   True
agent prevent_arp_spoofing   True
ovs local_ip   ${LOCAL_IP}
END
fn_log "create /tmp/tmp "
fn_set_conf /etc/neutron/plugins/ml2/openvswitch_agent.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/openvswitch_agent.ini"

systemctl restart neutron-openvswitch-agent 
fn_log "systemctl restart neutron-openvswitch-agent "

}

#network node
function fn_config_network_vxlan () {
NET_INT=`ip add | grep br-ext  `
if [ $? -ne 0  ] 
then
	ovs-vsctl add-br br-ext 
	fn_log "ovs-vsctl add-br br-int"

fi

ovs-vsctl  show | grep Interface | grep $1
if [ $? -eq 0   ]
then	
	log_info " ${NET_DEVICE_NAME} have been added."
else
	ovs-vsctl add-port br-ext $1
	fn_log "ovs-vsctl add-port br-ext $1 "
fi


cat <<END >/tmp/tmp
ml2 type_drivers   flat,vlan,gre,vxlan
ml2 tenant_network_types   vxlan
ml2_type_flat flat_networks   physnet1
ml2_type_vxlan vni_ranges   1:1000
securitygroup firewall_driver   iptables_hybrid
END
fn_log "create /tmp/tmp "
fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/ml2_conf.ini"

LOCAL_IP=`grep $HOSTNAME /etc/hosts | awk -F " " '{print$1}'`

cat <<END >/tmp/tmp
agent tunnel_types   vxlan
agent l2_population   True
agent prevent_arp_spoofing   True
ovs local_ip   ${LOCAL_IP}
ovs bridge_mappings   physnet1:br-eth1
END
fn_log "create /tmp/tmp "
fn_set_conf /etc/neutron/plugins/ml2/openvswitch_agent.ini
fn_log "fn_set_conf /etc/neutron/plugins/ml2/openvswitch_agent.ini"

for service in dhcp-agent l3-agent metadata-agent openvswitch-agent
do
	systemctl restart neutron-$service
	fn_log "systemctl restart neutron-$service"
done

}

function fn_config_vxlan_main () {
if [ -e /etc/openstack-ocata_tag/controller_neutron.tag ]
then
	fn_config_controller_vxlan
fi



if  [ -e /etc/openstack-ocata_tag/network_neutron.tag ] 
then 
	fn_config_network_vxlan ${EXT_NET_DEVICE}
	fn_log "fn_config_network_vxlan ${EXT_NET_DEVICE} "
fi 


if  [ -e /etc/openstack-ocata_tag/computer_neutron.tag ] 
then 
	fn_config_computer_network_vxlan
	fn_log "fn_config_computer_network_vxlan  "
fi 
}


if [  ${NETWORK_TYPE}x = vlanx  ]
then
	fn_config_vlan_main
	fn_log "fn_config_vlan_main"
elif [ ${NETWORK_TYPE}x = vxlanx ]
then
	fn_config_vxlan_main
	fn_log "fn_config_vxlan_main"
else
	echo "please check installrc NETWORK_TYPE !"
	exit 1
fi
#-----------------------------------